<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Fuzzy Rainbows">
    <Require feature="wave-preview" /> 
  </ModulePrefs>
  <Content type="html">
    <![CDATA[     
    <link type="text/css" href="http://jqueryui.com/latest/themes/base/ui.all.css" rel="stylesheet" />
    <script type="text/javascript" src="http://jqueryui.com/latest/jquery-1.3.2.js"></script>
    <script type="text/javascript" src="http://jqueryui.com/latest/ui/ui.core.js"></script>
    <script type="text/javascript" src="http://jqueryui.com/latest/ui/ui.resizable.js"></script>
    <script type="text/javascript" src="http://jqueryui.com/latest/ui/ui.draggable.js"></script>    
    <script type="text/javascript" src="http://www.fuzzyrainbow.com/assets/jquery.corners.min.js"></script>
    <div id="debug">
    </div>
    <div style="height:500px; background-color:#BEFAFC;" id="drawing-area">
    </div>
		<script type="text/javascript">      
		  function DrawingArea(selector) {
		      this.selector = selector;
		      this.cuteboxes = [];
		  }
		  DrawingArea.prototype.add_cutebox = function(xstart, ystart, id) {
		      var cb = new CuteBox(xstart, ystart, id);
		      this.cuteboxes.push(cb);
		      $(this.selector).append(cb.render());
		  }
		  DrawingArea.prototype.resize_cutebox = function(id, newwidth, newheight) {
		      var w = newwidth + 'px';
		      var h = newheight + 'px';
          $('#' + id).css({'width' : w, 'height' : h});		  
		  }
		  DrawingArea.prototype.drag_cutebox = function(id, newxstart, newystart) {
		      var x = newxstart + 'px';
		      var y = newystart + 'px';
          $('#' + id).css({'left' : x, 'top' : y});		  
		  }
		  function CuteBox(xstart, ystart, id) {
		      this.xstart = xstart;
		      this.ystart = ystart;
		      this.id = id;
		  }
		  CuteBox.prototype.render = function() {
		      var self = this;
		      this.container = $('<div id="' + this.id + '" style="background-color:#8BDC2F; position:absolute; padding:5px; left:' + this.xstart + 'px; top:' + this.ystart + 'px; width:40px; height:40px;" class="cute-box">:)</div>');
		      this.container.corners();
		      this.container.resizable({
		          stop: function(event, ui) {
                  var val_str = self.id + '-' + ui.size.width + '-' + ui.size.height;
		              var data = {
		                  'resize': val_str
		              };
                  wave.getState().submitDelta(data);		              
		          }
		      });
		      this.container.draggable({
		          stop: function(event, ui) {
                  var val_str = self.id + '-' + ui.position.left + '-' + ui.position.top;
		              var data = {
		                  'drag': val_str
		              };
                  wave.getState().submitDelta(data);	
              }
		      });
		      return this.container;
		  }
		  var da;
			$(function(){
			    da = new DrawingArea($("#drawing-area"));
          $("#drawing-area").click(function(e) {
		          var val_str = da.cuteboxes.length + '-' + e.pageX + '-' + e.pageY;
		          var data = {
		              'newcutebox': val_str
		          };
              wave.getState().submitDelta(data);
          });
			});

		  function stateUpdated() {
		      var state = wave.getState();
		      var keys = state.getKeys();
		      for (var i=0; i<keys.length; ++i) {
              var vals = state.get(keys[i]);
              var valarray = vals.split('-');              
              var id = valarray[0];              
		          if (keys[i] == 'newcutebox') {
		              if ($("#" + id).length == 0) {
		                  var xstart = valarray[1];
		                  var ystart = valarray[2];		          
                      da.add_cutebox(xstart, ystart, id);
                  }
              }
              else if (keys[i] == 'resize') {
		              var newwidth = valarray[1];
		              var newheight = valarray[2];		          
                  da.resize_cutebox(id, newwidth, newheight);              
              }
              else if (keys[i] == 'drag') {
		              var newxstart = valarray[1];
		              var newystart = valarray[2];		          
                  da.drag_cutebox(id, newxstart, newystart);              
              }
          }
		  }			

		  function init() {
			  if (wave && wave.isInWaveContainer()) {
				  wave.setStateCallback(stateUpdated);
			  }
		  }

		  gadgets.util.registerOnLoadHandler(init);			

		</script>
    ]]>
  </Content>
</Module>
